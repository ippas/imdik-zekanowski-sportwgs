include required(classpath("application"))


backend {
    default = SLURM
    providers {
        SLURM {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
            config {
                run-in-background = true
                runtime-attributes = """
                    String? docker
                    Float? memory_mb = 6656
                    Int? cpu = 1

                    String account = "plgsportwgs2"
                    String partition = "plgrid-testing"
                    String time = "1:0:0"
                    String SLURM_LOG="/net/archive/groups/plggneuromol/matzieb/slurm-log"
                    String RIMROCK_WD="/net/archive/groups/plggneuromol/matzieb/slurm-log"

                    String TOOLS_DIR="/net/archive/groups/plggneuromol/tools/"
                """

                submit = """
                    if [ -z $proxy ]
                    then
                        echo "[-[ ERROR ]-] proxy variable is not set (proxy certificate)!"
                        exit 1
                    fi

                    HEAD="#!/bin/bash
#SBATCH -A ${account}
#SBATCH -p ${partition}
#SBATCH -t ${time}
#SBATCH --cpus-per-task=${cpu}
#SBATCH --mem=${ceil(memory_mb)}MB
#SBATCH --output=${SLURM_LOG}/%j.out
#SBATCH --error=${SLURM_LOG}/%j.err

                    set -x"

                    SCRIPT=$(
                        ${TOOLS_DIR}/build-json.sh \
                        "$HEAD" \
                        "sg plggneuromol -c '${job_shell} ${script}'" \
                        "${RIMROCK_WD}"
                    )

                    sleep $[($RANDOM % 5)].$[($RANDOM % 100)]
                    while true
                    do
                        RIMROCK_RESPONSE=$(
                            curl -k -X POST \
                                --data-binary "$SCRIPT" \
                                --header "Content-Type:application/json" \
                                --header "PROXY:$proxy" \
                                https://rimrock.plgrid.pl/api/jobs
                        )
                        echo "$RIMROCK_RESPONSE"

                        re="QUEUED"
                        if [[ $RIMROCK_RESPONSE =~ $re ]]
                        then
                            echo "[-[ INFO ]-] Job $re!"
                            break
                        else
                            date
                            echo "[-[ WARNING ]-] Unable to start a job. " \
                                "Retrying in 300 s..."
                            sleep 300
                        fi
                    done
                """

                submit-docker = """
                    if [ -z $proxy ]
                    then
                        echo "[-[ ERROR ]-] proxy variable is not set (proxy certificate)!"
                        exit 1
                    fi

                    if [ -z $SINGULARITY_CACHEDIR ]
                    then
                        echo "[-[ ERROR ]-] SINGULARITY_CACHEDIR variable is not set!"
                        exit 1
                    else
                        mkdir -p $SINGULARITY_CACHEDIR
                    fi

                    module load plgrid/tools/singularity
                    export SINGULARITY_TMPDIR=$SCRATCH_LOCAL

                    # prepare SIF file
                    SIF_CONTAINER=$(
                        echo '${docker}' | \
                        rev | \
                        cut -d/ -f 1 | \
                        rev | \
                        sed -e 's/:/_/g' | \
                        sed -e 's/$/.sif/'
                    )
                    export SIF_CONTAINER_PATH=$SINGULARITY_CACHEDIR/$SIF_CONTAINER

                    # Create an exclusive filelock with flock
                    LOCK_FILE=$SINGULARITY_CACHEDIR/singularity_pull_flock
                    flock --exclusive $LOCK_FILE bash -c '
                        if [ -f "$SIF_CONTAINER_PATH" ]
                        then
                            echo "[-[ INFO ]-] $SIF_CONTAINER_PATH exists"
                        else
                            echo "[-[ INFO ]-] $SIF_CONTAINER_PATH does not exist! " \
                                "Pulling..."

                            PULLING_STATUS=$(
                                singularity pull $SIF_CONTAINER_PATH docker://${docker}
                                singularity exec $SIF_CONTAINER_PATH \
                                    echo "successfully pulled ${docker}!"
                            )

                            re="successfully pulled"
                            if [[ $PULLING_STATUS =~ $re ]]
                            then
                                echo "[-[ INFO ]-] $PULLING_STATUS"
                            else
                                echo "[-[ ERROR ]-] unsuccessful ${docker} pulling"
                                # we are in a subshell, it does not work
                                # exit 1
                            fi
                        fi
                    '

                    # Final check outside of a subshell
                    if [ ! -f "$SIF_CONTAINER_PATH" ]
                    then
                        exit 1
                    fi

                    HEAD="#!/bin/bash
#SBATCH -A ${account}
#SBATCH -p ${partition}
#SBATCH -t ${time}
#SBATCH --cpus-per-task=${cpu}
#SBATCH --mem=${ceil(memory_mb)}MB
#SBATCH --output=${SLURM_LOG}/%j.out
#SBATCH --error=${SLURM_LOG}/%j.err

                    set -x

                    module load plgrid/tools/singularity
                    export SINGULARITY_CACHEDIR=$SINGULARITY_CACHEDIR
                    export SINGULARITY_TMPDIR=$SCRATCH_LOCAL"

                    SING="sg plggneuromol -c \
                        'singularity exec --containall \
                        --bind ${cwd}:${docker_cwd} \
                        $SIF_CONTAINER_PATH ${job_shell} ${docker_script}'"

                    SCRIPT=$(
                        ${TOOLS_DIR}/build-json.sh \
                        "$HEAD" \
                        "$SING" \
                        "${RIMROCK_WD}"
                    )

                    sleep $[($RANDOM % 5)].$[($RANDOM % 100)]
                    while true
                    do
                        RIMROCK_RESPONSE=$(
                            curl -k -X POST \
                                --data-binary "$SCRIPT" \
                                --header "Content-Type:application/json" \
                                --header "PROXY:$proxy" \
                                https://rimrock.plgrid.pl/api/jobs
                        )
                        echo "$RIMROCK_RESPONSE"

                        re="QUEUED"
                        if [[ $RIMROCK_RESPONSE =~ $re ]]
                        then
                            echo "[-[ INFO ]-] Job $re!"
                            break
                        else
                            date
                            echo "[-[ WARNING ]-] Unable to start a job. " \
                                "Retrying in 300 s..."
                            sleep 300
                        fi
                    done
                """

            }
        }
    }
}
